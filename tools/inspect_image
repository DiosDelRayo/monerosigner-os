#!/usr/bin/env python3

from argparse import ArgumentParser
from os import makedirs, path, rmdir
from os.path import basename
from subprocess import run
from typing import List, Tuple
from re import search


class ImageInspector:

    def __init__(self, image_file: str):
        self.image_file: str = image_file
        self.sector_size: int = 0
        self.partitions: List[Tuple[int, int, str]] = self.get_partitions()

    def get_partitions(self) -> List[Tuple[int, int, str]]:
        result = run(['fdisk', '-l', self.image_file], capture_output=True, text=True)
        partitions = []
        for line in result.stdout.splitlines():
            if self.image_file in line and not line.startswith('Disk '):
                parts = line.split()
                start_sector = int(parts[2])
                size = parts[3]
                id_type = parts[5]
                partitions.append((start_sector, size, id_type))
                continue
            if match := search(r'Units:.*= (\d+) bytes', line):
                self.sector_size = int(match.group(1))
        return partitions

    def mount_partition(self, start_sector, mount_point) -> None:
        offset = start_sector * self.sector_size
        makedirs(mount_point, exist_ok=True)
        run(['sudo', 'mount', '-o', f'loop,offset={offset}', self.image_file, mount_point])
        print(f'Mounted {self.image_file} at {mount_point}')

    def unmount_partition(self, mount_point) -> None:
        run(['sudo', 'umount', mount_point])
        rmdir(mount_point)
        print(f'Unmounted and removed {mount_point}')

    def list_partitions(self) -> None:
        print(f'Sector size: {self.sector_size}')
        for i, (start, size, id_type) in enumerate(self.partitions, start=1):
            print(f'Partition {i}: Start sector: {start}, Size: {size}, Type: {id_type}')

    def mount_all_partitions(self) -> None:
        for i, partition in enumerate(self.partitions, start=1):
            mount_point = basename(f'{self.image_file}{i}')
            self.mount_partition(partition[0], mount_point)

    def mount_selected_partitions(self, partitions_to_mount) -> None:
        for i in partitions_to_mount:
            partition = self.partitions[i - 1]
            mount_point = basename(f'{self.image_file}{i}')
            self.mount_partition(partition[0], mount_point)

    def unmount_all_partitions(self) -> None:
        for i in range(1, len(self.partitions) + 1):
            mount_point = basename(f'{self.image_file}{i}')
            if path.ismount(mount_point):
                self.unmount_partition(mount_point)


if __name__ == '__main__':
    parser = ArgumentParser(description='Inspect and mount partitions of an image file.')
    parser.add_argument('image', help='Path to the image file')
    parser.add_argument('--list', action='store_true', help='List all partitions')
    parser.add_argument('--mount', nargs='*', type=int, help='Mount specific partitions by numbers (starting from 1)')
    parser.add_argument('--unmount', action='store_true', help='Unmount all mounted partitions')

    args = parser.parse_args()

    inspector = ImageInspector(args.image)

    if args.list:
        inspector.list_partitions()
    elif args.unmount:
        inspector.unmount_all_partitions()
    elif args.mount:
        inspector.mount_selected_partitions(args.mount)
    else:
        inspector.mount_all_partitions()
